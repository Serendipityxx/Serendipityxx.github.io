---
layout:  post
title:   "常规锁的细节"
date:   2024-12-04 18:54:00
author:  'Xiangxiao'
header-img: 'img/post-bg-2015.jpg'
catalog:   false
tags:
- c
- 常规锁
- postgres内核
---


# 常规锁细节

首先划分一下弱锁和强锁，以ShareUpdateExclusiveLock为分割，在其之前为弱锁，在其之后为强锁，弱锁是相容的，强锁是互斥的。

|弱锁|强锁|
|:-:|:-:|
|AccessShareLock、RowShareLock、RowExclusiveLock|ShareLock、ShareRowExclusiveLock、ExclusiveLock、AccessExclusiveLock|

## 常规锁的申请

加锁的API是LockAcquire，但是在里面还是调用的是LockAcquireExtended。
```c
LockAcquireResult
LockAcquire(const LOCKTAG *locktag,	        ：锁tag
		LOCKMODE lockmode,		：申请锁模式
		bool sessionLock,		：会话锁 或 事务锁
		bool dontWait)			：是否等待
{
	return LockAcquireExtended(locktag, lockmode, sessionLock, dontWait,
							   true, NULL);
}


LockAcquireResult
LockAcquireExtended(const LOCKTAG *locktag,
		LOCKMODE lockmode,
		bool sessionLock,
		bool dontWait,
		bool reportMemoryError,
		LOCALLOCK **locallockp)
{
	...
}

```

### 查找本地锁表

在Acquire Lock的时候首先查找的是本地锁表LocalLock，通过hash_search函数搜索，locktag作为查找的key值，返回一个LOCALLOCK*。如果在本地锁表没有找到的话就构造一条放入本地锁表。

```c
	/*
	 * Find or create a LOCALLOCK entry for this lock and lockmode
	 */
	MemSet(&localtag, 0, sizeof(localtag)); /* must clear padding */
	localtag.lock = *locktag;
	localtag.mode = lockmode;
	//首先查本地锁表
	locallock = (LOCALLOCK *) hash_search(LockMethodLocalHash,
										  (void *) &localtag,
										  HASH_ENTER, &found);

	/*
	 * if it's a new locallock object, initialize it
	 */
	if (!found)//如果不存在的话
	{
		locallock->lock = NULL;
		locallock->proclock = NULL;
		locallock->hashcode = LockTagHashCode(&(localtag.lock));
		locallock->nLocks = 0;//没人持有锁
		locallock->holdsStrongLockCount = false;//没有持有强锁
		locallock->lockCleared = false;
		locallock->numLockOwners = 0;
		locallock->maxLockOwners = 8;
		locallock->lockOwners = NULL;	/* in case next line fails */
		locallock->lockOwners = (LOCALLOCKOWNER *)
			MemoryContextAlloc(TopMemoryContext,
							   locallock->maxLockOwners * sizeof(LOCALLOCKOWNER));
	}
	else//如果查找到了的话，看看是否有足够的空间存储
	{
		/* Make sure there will be room to remember the lock */
		if (locallock->numLockOwners >= locallock->maxLockOwners)
		{
			int			newsize = locallock->maxLockOwners * 2;

			locallock->lockOwners = (LOCALLOCKOWNER *)
				repalloc(locallock->lockOwners,
						 newsize * sizeof(LOCALLOCKOWNER));
			locallock->maxLockOwners = newsize;
		}
	}
```
如果已经持有锁的话，使locallock->nLocks++
```c
/*
	 * If we already hold the lock, we can just increase the count locally.
	 *
	 * If lockCleared is already set, caller need not worry about absorbing
	 * sinval messages related to the lock's object.
	 */
	if (locallock->nLocks > 0)
	{
		GrantLockLocal(locallock, owner);
		if (locallock->lockCleared)
			return LOCKACQUIRE_ALREADY_CLEAR;
		else
			return LOCKACQUIRE_ALREADY_HELD;
	}
```

### 查找fast path

在查找本地锁表之后，如果本地锁表内没有，则开始查找fast path，首先是条件一：
- 要求必须是非咨询锁 locktag_lockmethodid == DEFAULT_LOCKMETHOD
- 要求锁的对象为表 locktag_type == LOCKTAG_RELATION
- 要求必须是当前数据库的锁 locktag_field1 == MyDatabaseId
- 要求锁的级别必须是弱锁 (mode) < ShareUpdateExclusiveLock

并且还有个条件需要判断的是，当前fastpath里面已经使用的数量是否超过了最大数。FastPathLocalUseCount < FP_LOCK_SLOTS_PER_BACKEND

```c
/*
#define EligibleForRelationFastPath(locktag, mode) \
	((locktag)->locktag_lockmethodid == DEFAULT_LOCKMETHOD && \
	(locktag)->locktag_type == LOCKTAG_RELATION && \
	(locktag)->locktag_field1 == MyDatabaseId && \
	MyDatabaseId != InvalidOid && \
	(mode) < ShareUpdateExclusiveLock)
*/
	if (EligibleForRelationFastPath(locktag, lockmode) &&
		FastPathLocalUseCount < FP_LOCK_SLOTS_PER_BACKEND)
	{
		uint32		fasthashcode = FastPathStrongLockHashPartition(hashcode);//用hashcode计算在1024数组的哪个位置
		bool		acquired;

		/*
		 * LWLockAcquire acts as a memory sequencing point, so it's safe to
		 * assume that any strong locker whose increment to
		 * FastPathStrongRelationLocks->counts becomes visible after we test
		 * it has yet to begin to transfer fast-path locks.
		 */
		LWLockAcquire(&MyProc->fpInfoLock, LW_EXCLUSIVE);
		if (FastPathStrongRelationLocks->count[fasthashcode] != 0)//查找共享内存FastPathStrongRelationLocks是否有强锁
			acquired = false;//有强锁则加锁失败
		else
			acquired = FastPathGrantRelationLock(locktag->locktag_field2,lockmode);//否则开始加锁
		LWLockRelease(&MyProc->fpInfoLock);
		if (acquired)
		{
			/*
			 * The locallock might contain stale pointers to some old shared
			 * objects; we MUST reset these to null before considering the
			 * lock to be acquired via fast-path.
			 */
			locallock->lock = NULL;
			locallock->proclock = NULL;
			GrantLockLocal(locallock, owner);//将锁存入LocalLock中
			return LOCKACQUIRE_OK;
		}
	}
```
用tag算的hashcode在%1024，落到1024数组FastPathStrongRelationLocks->count的某个位置上。

然后就是查找共享内存fastpath锁表FastPathStrongRelationLocks，检查是否有强锁。有强锁的话则加锁失败，否则使用FastPathGrantRelationLock函数加锁，这里传进去的参数locktag->locktag_field2是表的id，还有锁的模式。


FastPathGrantRelationLock逻辑：

- 3个bit一组按顺序查位图是不是空的，是空的就记录下来位置，不是空的就看下oid里面记的是不是需要的，如果正好Oid也是需要的，把当前请求锁模式或进去就可以返回了。
- 如果查了一遍位图，所有Oid都不是需要的，那就找一个空的位置，把锁级别记录到位图，OID记录到数组，然后返回。
- 如果查了一遍位图，没有一个空余位置，就返回false了。

```c
/*
 * FastPathGrantRelationLock
 *		Grant lock using per-backend fast-path array, if there is space.
 */
static bool
FastPathGrantRelationLock(Oid relid, LOCKMODE lockmode)
{
	uint32		f;
	uint32		unused_slot = FP_LOCK_SLOTS_PER_BACKEND;//FP_LOCK_SLOTS_PER_BACKEND=16,代表16个槽位

	/* Scan for existing entry for this relid, remembering empty slot. */
	for (f = 0; f < FP_LOCK_SLOTS_PER_BACKEND; f++)//开始遍历
	{
		if (FAST_PATH_GET_BITS(MyProc, f) == 0)//每次遍历三个byte位，判断位图是否为空
			unused_slot = f;//为空则记录下来
		else if (MyProc->fpRelId[f] == relid)//不为空则判断oid记录的是否为需要的oid
		{
			Assert(!FAST_PATH_CHECK_LOCKMODE(MyProc, f, lockmode));
			FAST_PATH_SET_LOCKMODE(MyProc, f, lockmode);//是的话则直接将锁模式存进去即可
			return true;
		}
	}

	/* If no existing entry, use any empty slot. 查了一边位图，所有的oid都不是需要的，找一个空的位置记录oid和锁模式 */
	if (unused_slot < FP_LOCK_SLOTS_PER_BACKEND)
	{
		MyProc->fpRelId[unused_slot] = relid;
		FAST_PATH_SET_LOCKMODE(MyProc, unused_slot, lockmode);
		++FastPathLocalUseCount;//当前使用计数加一
		return true;
	}

	/* No existing entry, and no empty slot. 如果没有空的位置则返回false */
	return false;
}

```

进程锁表fpLockBits和fpRelId字段如图所示，fpLockBits每三位标识一个relId对应的锁模式。


![进程锁表字段详解](https://ask.qcloudimg.com/http-save/yehe-2061863/6f21dfe04ea8dff659d2840f6e5eaf71.png)


### 如果申请的是强锁

如果申请的是强锁：

```c
if (ConflictsWithRelationFastPath(locktag, lockmode))//如果申请的是一个强锁
	{
		uint32		fasthashcode = FastPathStrongLockHashPartition(hashcode);

		BeginStrongLockAcquire(locallock, fasthashcode);//申请强锁
		if (!FastPathTransferRelationLocks(lockMethodTable, locktag,
										   hashcode))
		{//将fastpath移动失败
			AbortStrongLockAcquire();
			if (locallock->nLocks == 0)
				RemoveLocalLock(locallock);
			if (locallockp)
				*locallockp = NULL;
			if (reportMemoryError)
				ereport(ERROR,
						(errcode(ERRCODE_OUT_OF_MEMORY),
						 errmsg("out of shared memory"),
						 errhint("You might need to increase max_locks_per_transaction.")));
			else
				return LOCKACQUIRE_NOT_AVAIL;
		}
	}
```

开始处理强锁：BeginStrongLockAcquire

- （重要！相当于禁用了后面这个对象后来的所有fastpath）共享内存强锁表对应位置++FastPathStrongRelationLocks->count[fasthashcode]++;
- 本地锁记录强锁存在locallock->holdsStrongLockCount = true
- 全局记录本地强锁StrongLockInProgress = locallock

```c
static void
BeginStrongLockAcquire(LOCALLOCK *locallock, uint32 fasthashcode)
{
	Assert(StrongLockInProgress == NULL);
	Assert(locallock->holdsStrongLockCount == false);

	/*
	 * Adding to a memory location is not atomic, so we take a spinlock to
	 * ensure we don't collide with someone else trying to bump the count at
	 * the same time.
	 *
	 * XXX: It might be worth considering using an atomic fetch-and-add
	 * instruction here, on architectures where that is supported.
	 */

	SpinLockAcquire(&FastPathStrongRelationLocks->mutex);
	FastPathStrongRelationLocks->count[fasthashcode]++;//在FastPathStrongRelationLocks标记强锁
	locallock->holdsStrongLockCount = true;//标记本地锁表持有强锁
	StrongLockInProgress = locallock;//标记进程持有强锁
	SpinLockRelease(&FastPathStrongRelationLocks->mutex);
}
```

fastpath锁转换到主锁表：FastPathTransferRelationLocks

- 1 轮询PGPROC，用表oid在fpRelId16数组中查询，如果找到了，用找到的锁级别去主锁表中加锁。
- 2 清理fastpath对应的位置。
- 3 完成转换：PGPROC记录的fastpath锁换成主锁表的锁，便于死锁检查。
- 4 注意这里只是把fastpath中已经存在弱锁换到主锁表了，并没有给当前请求LockAcquire的对象加锁。

```c
static bool
FastPathTransferRelationLocks(LockMethod lockMethodTable, const LOCKTAG *locktag,
							  uint32 hashcode)
{
	LWLock	   *partitionLock = LockHashPartitionLock(hashcode);
	Oid			relid = locktag->locktag_field2;
	uint32		i;

	/*
	 * Every PGPROC that can potentially hold a fast-path lock is present in
	 * ProcGlobal->allProcs.  Prepared transactions are not, but any
	 * outstanding fast-path locks held by prepared transactions are
	 * transferred to the main lock table.
	 */
	for (i = 0; i < ProcGlobal->allProcCount; i++)//扫描所有进程
	{
		PGPROC	   *proc = &ProcGlobal->allProcs[i];
		uint32		f;

		LWLockAcquire(&proc->fpInfoLock, LW_EXCLUSIVE);

		if (proc->databaseId != locktag->locktag_field1)//如果进程数据库id和当前数据库id不一致则跳过
		{
			LWLockRelease(&proc->fpInfoLock);
			continue;
		}

		for (f = 0; f < FP_LOCK_SLOTS_PER_BACKEND; f++)//如果是当前数据库id，则开始遍历16个槽
		{
			uint32		lockmode;

			/* Look for an allocated slot matching the given relid. */
			if (relid != proc->fpRelId[f] || FAST_PATH_GET_BITS(proc, f) == 0)//表的id不正确或者未加锁
				continue;

			/* Find or create lock object. 循环检查三种弱锁 */
			LWLockAcquire(partitionLock, LW_EXCLUSIVE);
			for (lockmode = FAST_PATH_LOCKNUMBER_OFFSET;
				 lockmode < FAST_PATH_LOCKNUMBER_OFFSET + FAST_PATH_BITS_PER_SLOT;
				 ++lockmode)
			{
				PROCLOCK   *proclock;

				//检查某个进程是否持有某种锁，检查是否有这个是否持有弱锁
				if (!FAST_PATH_CHECK_LOCKMODE(proc, f, lockmode))
					continue;
				/* 如果持有弱锁，则将这个弱锁移动到主锁表和进程锁表中去 */
				proclock = SetupLockInTable(lockMethodTable, proc, locktag,
											hashcode, lockmode);
				if (!proclock)
				{
					LWLockRelease(partitionLock);
					LWLockRelease(&proc->fpInfoLock);
					return false;
				}
				GrantLock(proclock->tag.myLock, proclock, lockmode);//增加本地锁表计数
				FAST_PATH_CLEAR_LOCKMODE(proc, f, lockmode);//清理fastpath，也就是pgproc里面
			}
			LWLockRelease(partitionLock);

			/* No need to examine remaining slots. */
			break;
		}
		LWLockRelease(&proc->fpInfoLock);
	}
	return true;
}

```

如果前面都成功了，就可以申请强锁了，
```c
	proclock = SetupLockInTable(lockMethodTable, MyProc, locktag,
								hashcode, lockmode);//创建锁对象在主锁表和进程锁表中
```

lockMethodTable->conflictTab[lockmode]获得是与申请锁级别冲突的级别，例如申请1级锁：

- lockmode = 1
- lockMethodTable->conflictTab[lockmode] = 100000000
- 1级锁和8级锁冲突。

lockMethodTable->conflictTab[lockmode] & lock->waitMask表示如果当前申请的锁级别（比如我需要1级锁），和别人等在这个锁上的锁级别（别人需要8级锁，在等）不相容，那么当前申请的锁必须进入等待状态（我需要的1级锁必须等锁）。

所以就造成了PG经典的锁排队场景：

- 第一个人拿1级锁（select长事务）
- 第二个人等着拿8级锁（vacuum full）
- 后面再来一个1级锁就必须要排队了，因为强锁来了走3.3把fastpath的共享内存锁表标记了，后来的1级锁都不能在走fastpath了，走不成fastpath只能走主锁表，就会到这里等待。

```c
if (lockMethodTable->conflictTab[lockmode] & lock->waitMask)//查看申请锁与等待队列中的锁是否冲突
	found_conflict = true;
```

然后再检查申请的锁是否需要等待
```c
// found_conflict = LockCheckConflicts(lockMethodTable, lockmode, lock, proclock);

	found_conflict = LockCheckConflicts(lockMethodTable, lockmode, lock, proclock);
	//检查当前锁模式与其他事务持有的锁模式是否冲突
	if (!found_conflict)
	{
		/* No conflict with held or previously requested locks */
		GrantLock(lock, proclock, lockmode);
		GrantLockLocal(locallock, owner);
	}
	else
	{
		...
		WaitOnLock(locallock, owner);
		...
	}

	/*
	 * Lock state is fully up-to-date now; if we error out after this, no
	 * special error cleanup is required.
	 */
	FinishStrongLockAcquire();

	LWLockRelease(partitionLock);
	return LOCKACQUIRE_OK;
}
```

在LockCheckConflicts函数里面去检查事务之间是否有锁冲突
- 首先检查全局冲突：如果没有锁与我的请求冲突，那么我将获得锁。
- 然后检查减去自己的冲突锁，如果减完之后不冲突了，则获得锁。
- 检查是否是并行：
	- 单进程事务且冲突，直接返回冲突。
	- 多进程（并行）,减去具有相同group leader的锁，在判断是否冲突。

如果检查完之后不冲突，则增加锁的引用计数，否则进入等待状态
```c
if (!found_conflict)
	{
		/* No conflict with held or previously requested locks */
		GrantLock(lock, proclock, lockmode);
		GrantLockLocal(locallock, owner);
	}
```
等待，插入等待队列，在等待的时候还会触发死锁检测，调用关系是waitOnLock->ProcSleep->CheckDeadLock
```c
WaitOnLock(locallock, owner);
```

在插入等待队列的时候，需要注意一点，通常来说，如当前事务应该插入等待队列的末尾，但是如果本事务A除了当前申请的锁模式之外，已经持有了这个对象的其他锁模式，而且等待队列中某个事务B所等待的锁模式与当前事务A所持有的锁模式冲突，这个时候如果把事务A插入到这个等待者B的后面，则容易出现死锁，所以考虑将事务A插入到等待者的前面。

进入等待队列后，锁就开始进行等待唤醒：
- 死锁检测触发超时机制，要进行新一轮的死锁检测
- PGPROC->waitStatus不再是STATUS_WAITING状态，也就是其他事务已经释放了锁，当前事务被唤醒


## 常规锁的释放

相较于常规锁的申请，常规锁的释放就比较简单了。

- 从LockMethodLocalHash 查找LOCALLOCK，在它的owner数组里找到与当前进程对应的元素，解除LOCALLOCK与ResourceOwner之间的关联，并减小相应计数值。
- 将LOCALLOCK的加锁次数(nLocks)减1，如果减为0了，表示当前进程不再持有锁，则后续有两种解锁途径，分别是快速锁和主锁表。
- 对于快速锁，调用FastPathUnGrantRelationLock清除快速锁的加锁标记。如果解锁成功即可返回。
- 如果没找到快速锁，且LOCALLOCK.lock为空，说明被转移到了主锁表里(在加锁逻辑中，当申请快速锁成功时，会把LOCALLOCK.lock置空)。
- 查找主锁表LockMethodLockHash 以及 LockMethodProcLockHash，如果没有找到，则blog-error。找到了 调用UnGrantLock更新LOCK和PROCLOCK信息。
- 调用CleanUpLock：要么删除主表项，要么调用ProcLockWakeup()唤醒等待者，这里会按照 WFG 中构建的 soft-edge 以及 hard-edge 依赖关系进行唤醒。


## 参考文献和书籍
### 连接
- https://cloud.tencent.com/developer/article/2181226
- https://cloud.tencent.com/developer/article/2116290
- https://zhuanlan.zhihu.com/p/556300245
### 书籍
- 《PostgreSQL技术内幕——事务处理深度探索》


